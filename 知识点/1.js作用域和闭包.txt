jquery js库
vue 框架
es6 标准
js中 一切都是对象
js作用域
同名变量局部优先级高于全局变量
注：声明局部变量时一定要使用var,否则，解释器会将该变量当做全局对象window的属性
声明一个全局变量的时候，实际上是定义了全局对象window的一个属性
var num;
window.num;
函数被创建时会创建一个[[scope]]（作用域链）存储所有的全局变量
局部变量只能在函数内部访问
如果在函数内没有使用var声明变量，则该变量为全局变量

JavaScript 变量生命周期在它声明时初始化。
局部变量在函数执行完毕后销毁。
全局变量在页面关闭后销毁。

子变量可读父变量，父变量不可读子变量

闭包
1
为了在外部读取函数内部的局部变量
2
闭包就是能够读取其他函数内部变量的函数，函数没有被释放，整条作用域链上的局部变量都将得到保留。
由于在javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成‘定义在一个函数内部的函数
3 
function f1(){
　　n = 999;
　　function f2(){
　　　　console.log(n);　　//999，子可见父
　　}
}
4 
既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量了。
function f1(){
　　n = 999;
　　function f2(){
　　　　console.log(n);
　　}
　　return f2;
}
var result = f1();　　//返回的是f2函数
result();　　//999，这段就是闭包
5
闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中
function f1(){
　　var n = 999;
　　nAdd = function(){
　　　　n += 1;
　　}
　　function f2(){
　　　　console.log(n);
　　}
　　return f2;
}
var result = f1();
result();　　//从函数外部通过闭包f2获取到函数f1内部局部变量的值
nAdd();　　//从函数外部通过闭包修改局部变量n的值
result();　　//再次通过闭包f2获取到函数f1内部局部变量的值

在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n 一直保存在内存中，并没有在f1调用后被自动清除。

为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，不会再调用结束后，被垃圾回收机制(garbage collection)回收。

这段代码中另一个值得注意的地方，就是‘nAdd=function(){n+=1}’这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数(anonymous function)，而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。
6
使用闭包的注意点
1>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法时，在退出函数之前，将不使用的局部变量全部删除。
2>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象(object)使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值
7
当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包
8
http://www.cnblogs.com/yunfeifei/p/4019504.html
（闭包写法）
9应用 自执行函数 结果缓存 封装 实现类和继承 